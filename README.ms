üì¶ frontend/
‚îÇ
‚îú‚îÄ‚îÄ üìÅ public/                        # Archivos est√°ticos
‚îÇ   ‚îî‚îÄ‚îÄ index.html
‚îÇ
‚îú‚îÄ‚îÄ üìÅ src/
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ presentation/             # UI + React App
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ components/           # Componentes de presentation (Componentes pertenecientes al UI de la aplicaci√≥n)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ pages/                # Vistas de cada ruta (LoginPage, Dashboard, etc.)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ routes/               # Definici√≥n de rutas con React Router
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ styles/               # Tailwind y globales
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ providers/            # Contextos, ThemeProvider, AuthProvider
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ App.tsx                 # App principal
‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ application/              # Casos de uso (l√≥gica de negocio desacoplada)
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ usecases/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ auth/
‚îÇ   ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ loginUser.ts
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ shipments/
‚îÇ   ‚îÇ           ‚îî‚îÄ‚îÄ createShipment.ts
‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ domain/                   # Entidades y contratos
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ entities/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ User.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Shipment.ts
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÅ repositories/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ AuthRepository.ts
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ ShipmentRepository.ts
‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ infrastructure/           # Implementaciones concretas
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ services/             # Axios, JWT, APIs reales
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÅ repositories/         # Implementaciones de los repos
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ AuthApiRepository.ts
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ ShipmentApiRepository.ts
‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ shared/                   # C√≥digo compartido (utils, hooks, constantes)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ hooks/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ utils/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ components/           # Componentes puros (botones, inputs, layouts)
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ constants.ts
‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ store/                    # Redux Toolkit o Context API
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ store.ts
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ slices/
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ authSlice.ts
‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ main.tsx                    # Punto de entrada
‚îÇ   ‚îî‚îÄ‚îÄ vite-env.d.ts
‚îÇ
‚îú‚îÄ‚îÄ tailwind.config.ts              # Config de Tailwind
‚îú‚îÄ‚îÄ postcss.config.js
‚îú‚îÄ‚îÄ tsconfig.json
‚îú‚îÄ‚îÄ vite.config.ts
‚îî‚îÄ‚îÄ package.json




components -> slice -> caso de uso 
                    |-> apiRepository -> repository
                    |-> se hace el execute del caso de uso


Tablas
CREATE TABLE IF NOT EXISTS users (
  id SERIAL PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  email VARCHAR(150) UNIQUE NOT NULL,
  password VARCHAR(200) NOT NULL,
  refresh_token VARCHAR(500),
  token VARCHAR(500),

);


SELECT unnest(enum_range(NULL::productType));

CREATE TYPE shipmentStatus AS ENUM ('EN ESPERA', 'ENTRANSITO', 'ENTREGADO', 'CANCELADO');

CREATE TABLE shipments (
    id SERIAL PRIMARY KEY,
    product_type productType NOT NULL,
    street VARCHAR(100) NOT NULL,
    city VARCHAR(100) NOT NULL,
    state VARCHAR(100) NOT NULL,
    zip_code VARCHAR(10) NOT NULL,
    weight NUMERIC(10,2) NOT NULL CHECK (weight > 0),
    height NUMERIC(10,2) NOT NULL CHECK (height > 0),
    width NUMERIC(10,2) NOT NULL CHECK (width > 0),
    length NUMERIC(10,2) NOT NULL CHECK (length > 0),
    user_id INTEGER NOT NULL REFERENCES users(id),
    status shipmentStatus NOT NULL DEFAULT 'EN ESPERA'
);

Vale necesito que leas todo el codebase de server y client  1 necesito que hagas el register  
ya tengo la ruta configurada y los componentes y su pagina. 2- Empieza por el front end (Client) realizando la parte del slice del register, 
y todo lo relacionado con la clean architecture 3- cuando termines con el front end pasa al banck end  
y has lo mismo teniendo en cuenta lo hecho en el front end. 
4 antes de realizar cualquier cambios lee todo el code base no omitas ningun archivo tanto de client como de server para que actualices  
el contexto y veas los cambios realizados.


√≥mo se integra createApi con Clean Architecture en React?
1. Infraestructura (Data Source/Adapter)
El archivo que usa createApi (shipmentApi.js) act√∫a como un adaptador de infraestructura: sabe c√≥mo hablar con la API REST, pero no contiene l√≥gica de negocio.
2. Repositorio
Crea un ShipmentRepository (por ejemplo, en src/infrastructure/repositories/ShipmentApiRepository.ts).
Este repositorio usa los hooks generados por createApi (useCreateShipmentMutation, useGetAllShipmentQuery, etc.) y expone m√©todos de dominio (ej: createShipment, getShipments, etc.).
El repositorio traduce entre los modelos de dominio y los datos crudos de la API.
3. Casos de Uso (Use Cases)
Los casos de uso (en /application/use-cases/) orquestan la l√≥gica de negocio usando los m√©todos del repositorio.
Ejemplo: createShipmentUseCase llama a ShipmentRepository.createShipment() y maneja cualquier l√≥gica adicional (validaciones, transformaciones, etc.).
4. Presentaci√≥n (Componentes)
Los componentes React llaman a los casos de uso, no directamente a la API ni a los repositorios.
As√≠, la UI est√° desacoplada de la infraestructura.


Para el envio de confirmacion al registrarse hay que usar el servicio de email https://ethereal.email/create